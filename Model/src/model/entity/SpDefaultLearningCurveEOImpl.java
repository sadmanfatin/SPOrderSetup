package model.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu May 26 17:09:00 BDT 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SpDefaultLearningCurveEOImpl extends EntityImpl {
    private static EntityDefImpl mDefinitionObject;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        DlcId {
            public Object get(SpDefaultLearningCurveEOImpl obj) {
                return obj.getDlcId();
            }

            public void put(SpDefaultLearningCurveEOImpl obj, Object value) {
                obj.setDlcId((Number)value);
            }
        }
        ,
        DayNo {
            public Object get(SpDefaultLearningCurveEOImpl obj) {
                return obj.getDayNo();
            }

            public void put(SpDefaultLearningCurveEOImpl obj, Object value) {
                obj.setDayNo((Number)value);
            }
        }
        ,
        LearningPercentage {
            public Object get(SpDefaultLearningCurveEOImpl obj) {
                return obj.getLearningPercentage();
            }

            public void put(SpDefaultLearningCurveEOImpl obj, Object value) {
                obj.setLearningPercentage((Number)value);
            }
        }
        ,
        OrgId {
            public Object get(SpDefaultLearningCurveEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(SpDefaultLearningCurveEOImpl obj, Object value) {
                obj.setOrgId((Number)value);
            }
        }
        ,
        ItemDescription {
            public Object get(SpDefaultLearningCurveEOImpl obj) {
                return obj.getItemDescription();
            }

            public void put(SpDefaultLearningCurveEOImpl obj, Object value) {
                obj.setItemDescription((String)value);
            }
        }
        ,
        ItemId {
            public Object get(SpDefaultLearningCurveEOImpl obj) {
                return obj.getItemId();
            }

            public void put(SpDefaultLearningCurveEOImpl obj, Object value) {
                obj.setItemId((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SpDefaultLearningCurveEOImpl object);

        public abstract void put(SpDefaultLearningCurveEOImpl object,
                                 Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int DLCID = AttributesEnum.DlcId.index();
    public static final int DAYNO = AttributesEnum.DayNo.index();
    public static final int LEARNINGPERCENTAGE = AttributesEnum.LearningPercentage.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int ITEMDESCRIPTION = AttributesEnum.ItemDescription.index();
    public static final int ITEMID = AttributesEnum.ItemId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SpDefaultLearningCurveEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        if (mDefinitionObject == null) {
            mDefinitionObject = EntityDefImpl.findDefObject("model.entity.SpDefaultLearningCurveEO");
        }
        return mDefinitionObject;
    }

    /**
     * Gets the attribute value for DlcId, using the alias name DlcId.
     * @return the DlcId
     */
    public Number getDlcId() {
        return (Number)getAttributeInternal(DLCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DlcId.
     * @param value value to set the DlcId
     */
    public void setDlcId(Number value) {
        setAttributeInternal(DLCID, value);
    }

    /**
     * Gets the attribute value for DayNo, using the alias name DayNo.
     * @return the DayNo
     */
    public Number getDayNo() {
        return (Number)getAttributeInternal(DAYNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for DayNo.
     * @param value value to set the DayNo
     */
    public void setDayNo(Number value) {
        setAttributeInternal(DAYNO, value);
    }

    /**
     * Gets the attribute value for LearningPercentage, using the alias name LearningPercentage.
     * @return the LearningPercentage
     */
    public Number getLearningPercentage() {
        return (Number)getAttributeInternal(LEARNINGPERCENTAGE);
    }

    /**
     * Sets <code>value</code> as the attribute value for LearningPercentage.
     * @param value value to set the LearningPercentage
     */
    public void setLearningPercentage(Number value) {
        setAttributeInternal(LEARNINGPERCENTAGE, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the OrgId
     */
    public Number getOrgId() {
        return (Number)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(Number value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for ItemDescription, using the alias name ItemDescription.
     * @return the ItemDescription
     */
    public String getItemDescription() {
        return (String)getAttributeInternal(ITEMDESCRIPTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemDescription.
     * @param value value to set the ItemDescription
     */
    public void setItemDescription(String value) {
        setAttributeInternal(ITEMDESCRIPTION, value);
    }

    /**
     * Gets the attribute value for ItemId, using the alias name ItemId.
     * @return the ItemId
     */
    public Number getItemId() {
        return (Number)getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItemId.
     * @param value value to set the ItemId
     */
    public void setItemId(Number value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index,
                                           AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value,
                                         AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param dlcId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Number dlcId) {
        return new Key(new Object[]{dlcId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        oracle.jbo.server.SequenceImpl s =
        new oracle.jbo.server.SequenceImpl("SP_DEFAULT_LEARNING_CURVE_S",  getDBTransaction());
        oracle.jbo.domain.Number sVal = s.getSequenceNumber();
        this.setDlcId(sVal);
        
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
